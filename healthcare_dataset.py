# -*- coding: utf-8 -*-
"""Healthcare_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sxPKiFVCGHBLqoadyp3HsSxd0xJTELNo

# 1.Import Packages and Data File
"""

#import packages
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os

# import data files
import kagglehub

path = kagglehub.dataset_download("prasad22/healthcare-dataset")

csv_file_path = os.path.join(path, "healthcare_dataset.csv")

df = pd.read_csv(csv_file_path)

df.head()

"""# 2.Data Preprocessing"""

# Check Dataframe
df.info()

# Check null value
df.isnull().sum()

# Check duplicates
df.duplicated().sum()

# Double confirm the duplicates
columns_to_check = ['Name', 'Age', 'Gender', 'Blood Type', 'Medical Condition','Date of Admission', 'Hospital', 'Room Number']
for i in range(1, len(columns_to_check) + 1):
    subset_columns = columns_to_check[:i]
    print(f"Checking subset: {subset_columns}")
    print("Duplicates:", df.duplicated(subset=subset_columns).sum())

# Remove duplicates
df2 = df.drop_duplicates()

# Check new df
df2.info()

"""Summary
1. The Dataset is composed 55500 records, with 534 duplicates, upon removal, the dataset is now with 54966 unique records.
2. No null value is found in the dataset.

# 3.Data Exploration
"""

# Change Date of admission and discharge date to Datetime format
df2['Date of Admission'] = pd.to_datetime(df['Date of Admission'])
df2['Discharge Date'] = pd.to_datetime(df['Discharge Date'])

# Add a column "Hospitalization Time"
df2['Hospitalization time'] = df2['Discharge Date'] - df2['Date of Admission']
df2['Hospitalization time in days'] = df2['Hospitalization time'].dt.total_seconds() / (24 * 3600)

# Check distribution of dataset
df2.describe()

# Check distribution of dataset (non-numerical)
df2.describe(include= "object").T

# Age
df2['Age'].hist()
plt.title("Age Distribution")
plt.show()

# Gender
df2['Gender'].value_counts().plot(kind='pie',autopct='%1.1f%%', startangle=90)
plt.title("Gender Distribution")
plt.show()

# Blood type
df2['Blood Type'].value_counts().plot(kind='pie',autopct='%1.1f%%', startangle=90)
plt.title("Blood Type Distribution")
plt.show()

# Blood Type - Blood Rhesus
df2['Blood Rhesus'] = df2['Blood Type'].apply(lambda x: 'Yes' if x.endswith('+') else 'No')

df2['Blood Rhesus'].value_counts().plot(kind='pie',autopct='%1.1f%%', startangle=90)
plt.title("Blood Rhesus Distribution")
plt.show()

# Blood Type - blood type excl.Rhesus
df2['Blood Type excl.Rhesus'] = df2['Blood Type'].str.replace('[+-]', '', regex=True)

df2['Blood Type excl.Rhesus'].value_counts().plot(kind='pie',autopct='%1.1f%%', startangle=90)
plt.title("Blood Type excl.Rhesus Distribution")
plt.show()

# Medical Condition
df2['Medical Condition'].value_counts().plot(kind='pie',autopct='%1.1f%%',startangle=90)
plt.title("Medical Condition Distribution")
plt.show()

# Admission
df2['month_of_admission'] = df2['Date of Admission'].dt.month
monthly_counts = df2['month_of_admission'].value_counts().sort_index()

x = monthly_counts.index
y = monthly_counts.values

plt.plot(x, y, marker='o', linestyle='-', color='blue')
plt.xticks(range(1, 13))
plt.xlabel('Month of Admission')
plt.ylabel('Admission Count')
plt.title('Admissions by Month')
plt.show()

"""Summary

* Patient Age Range

Patients age ranged from 13 to 89 years, with and average of 52 years.

*  Gender

Patients' gender are equally divided with male patients slightly more by a percentage of 2%.

* Blood Type

A- is the blood type most prevalent but the distribution of blood type among patients are nearly evenly distributed.


*  Medical Condition

There are 6 types of Medical conditions,'Cancer', 'Obesity', 'Diabetes', 'Asthma', 'Hypertension' and 'Arthritis'. Arthritis has the highest frequency,with 17% abundance.

*  Temporal coverage

From date of admission, the data span from patients admitted from 9 May 2019 to 7 May 2024.

*  Hospitalization Time

With regards to hospipitalization time of patitents, the day range from 1 day to 30 days, with an average and median of 15 days.

*  Admission

Admission trend is observed from the dataset, starting from april, the admissions rised and reach highest admissions in August.

*  Hospitals and Doctors

There are 39,876 unique hospitals and 40,431 doctors included in the dataset


*  Test Results

There are 3 types of test results, 'Normal","Inconclusive" and " Abnormal". in the dataset, "Abnormal" has the highest frequency, with 18437 appearance over 54966 patients, which is of 34% abundance.

# 4. Machine Learning - Naives Bayes
"""

# Import the packages
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report, accuracy_score

# Transform categorical data to int.
label_encoders = {}
for col in df.columns:
    if df[col].dtype == 'object':
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col].astype(str))
        label_encoders[col] = le

# confirm transformed dtype
df.info()

# Split data
X = df.drop(columns=['Test Results','Name','Room Number'])
y = df['Test Results']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=7)

#Naive Bayes classifier
model = GaussianNB()
model.fit(X_train, y_train)

# Prediction
y_pred = model.predict(X_test)
y_pred

# Accuracy Score
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("\nClassification Report:\n", classification_report(y_test, y_pred))